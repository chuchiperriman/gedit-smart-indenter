diff --git a/src/geditsmartindenter-plugin.c b/src/geditsmartindenter-plugin.c
index 6723fd7..e760687 100644
--- a/src/geditsmartindenter-plugin.c
+++ b/src/geditsmartindenter-plugin.c
@@ -24,6 +24,7 @@
 
 #include "geditsmartindenter-plugin.h"
 #include "gsi-indenters-manager.h"
+#include "gsi-indenter-cxx.h"
 
 #include <glib/gi18n-lib.h>
 #include <gedit/gedit-debug.h>
@@ -33,31 +34,16 @@
 
 #define WINDOW_DATA_KEY	"GeditsmartindenterPluginWindowData"
 #define VIEW_KEY	"GeditsmartindenterPluginView"
+#define ENABLED_KEY     "GeditsmartindenterPluginEnabled"
 
 #define GEDITSMARTINDENTER_PLUGIN_GET_PRIVATE(object)	(G_TYPE_INSTANCE_GET_PRIVATE ((object), TYPE_GEDITSMARTINDENTER_PLUGIN, GeditsmartindenterPluginPrivate))
 
 #define get_window_data(window) ((WindowData *) (g_object_get_data (G_OBJECT (window), WINDOW_DATA_KEY)))
 #define get_view(buffer) ((GtkTextView *) (g_object_get_data (G_OBJECT (buffer), VIEW_KEY)))
-
-typedef enum{
-	INDENT,
-	INDENT_TO_PAIR,
-	INDENT_PAIR_LINE
-}IndenterType;
-
-typedef struct{
-	gchar *match;
-	gchar *indent;
-	gchar *append;
-	IndenterType type;
-	gchar *start_pair;
-	gchar *end_pair;
-	gboolean with_close_pair;
-} Indenter;
+#define is_enabled(view) ((g_object_get_data (G_OBJECT (view), ENABLED_KEY)) != NULL)
 
 struct _GeditsmartindenterPluginPrivate
 {
-	GList *indenters;
 	GsiIndentersManager *manager;
 };
 
@@ -68,75 +54,23 @@ typedef struct{
 
 GEDIT_PLUGIN_REGISTER_TYPE (GeditsmartindenterPlugin, geditsmartindenter_plugin)
 
-static Indenter*
-indenter_new (const gchar *match,
-	      const gchar *indent,
-	      const gchar *append)
-{
-	Indenter *indenter;
-	indenter = g_slice_new (Indenter);
-	indenter->match = g_strdup (match);
-	indenter->indent = g_strdup (indent);
-	indenter->append = g_strdup (append);
-	indenter->type = INDENT;
-	
-	return indenter;
-}
-
-static Indenter*
-indenter_new_pair (const gchar *match,
-		   const gchar *indent,
-		   const gchar *append,
-		   const gchar *start_pair,
-		   const gchar *end_pair)
-{
-	Indenter *indenter = indenter_new (match, indent, append);
-	indenter->type = INDENT_TO_PAIR;
-	indenter->start_pair = g_strdup (start_pair);
-	indenter->end_pair = g_strdup (end_pair);
-	indenter->with_close_pair = FALSE;
-	
-	return indenter;
-}
-
-static Indenter*
-indenter_new_pair_line (const gchar *match,
-			const gchar *indent,
-			const gchar *append,
-			const gchar *start_pair,
-			const gchar *end_pair,
-			gboolean with_close_pair)
-{
-	Indenter *indenter = indenter_new_pair (match, indent, append, start_pair, end_pair);
-	indenter->type = INDENT_PAIR_LINE;
-	indenter->with_close_pair = with_close_pair;
-	
-	return indenter;
-}
-
 static void
 geditsmartindenter_plugin_init (GeditsmartindenterPlugin *plugin)
 {
+	GsiIndenter *indenter;
+	
 	plugin->priv = GEDITSMARTINDENTER_PLUGIN_GET_PRIVATE (plugin);
 
 	gedit_debug_message (DEBUG_PLUGINS,
 			     "GeditsmartindenterPlugin initializing");
 
-	plugin->priv->indenters = NULL;
-	
-	plugin->priv->indenters = g_list_append (plugin->priv->indenters,
-						 indenter_new (".*\\/\\*(?!.*\\*/)", "+1", " * "));
-	plugin->priv->indenters = g_list_append (plugin->priv->indenters,
-						 indenter_new (".*\\{[^\\}]*", "+1", "	"));
-	plugin->priv->indenters = g_list_append (plugin->priv->indenters,
-						 indenter_new_pair ("\\([^\\)]*$", "+1", NULL, "(", ")"));
-	plugin->priv->indenters = g_list_append (plugin->priv->indenters,
-						 indenter_new ("(if|while|for)\\s*\\(.*\\)\\s*$", "+1", "	"));
-	plugin->priv->indenters = g_list_append (plugin->priv->indenters,
-						 indenter_new ("^\\s*\\*[^/].*$", "+1", "* "));
-	plugin->priv->indenters = g_list_append (plugin->priv->indenters,
-						 indenter_new_pair_line ("\\)\\s*$", "+1", "\t", "(", ")", TRUE));
 	plugin->priv->manager = gsi_indenters_manager_new ();
+	
+	indenter = gsi_indenter_cxx_new ();
+	gsi_indenters_manager_register (plugin->priv->manager,
+					"c",
+					indenter);
+	g_object_unref (indenter);
 }
 
 static void
@@ -152,205 +86,92 @@ geditsmartindenter_plugin_finalize (GObject *object)
 	G_OBJECT_CLASS (geditsmartindenter_plugin_parent_class)->finalize (object);
 }
 
-static gchar *
-get_indent_string (guint tabs, guint spaces)
+static void
+window_data_free (WindowData *data)
 {
-	gchar *str;
-
-	str = g_malloc (tabs + spaces + 1);
-	if (tabs > 0)
-		memset (str, '\t', tabs);
-	if (spaces > 0)
-		memset (str + tabs, ' ', spaces);
-	str[tabs + spaces] = '\0';
+        g_return_if_fail (data != NULL);
 
-	return str;
+        g_slice_free (WindowData, data);
 }
 
-static gchar*
-get_indent_from_pair (GtkSourceView *view, GtkTextIter *iter)
+static void
+insert_text_cb (GtkTextBuffer *buffer,
+		GtkTextIter   *location,
+		gchar         *text,
+		gint           len,
+		GeditsmartindenterPlugin *self)
 {
-	GtkTextIter start = *iter;
-	guint tab_width = gtk_source_view_get_tab_width (view);
-	guint total_size = 0;
-	gchar *indent = NULL;
-	
-	gtk_text_iter_set_line_offset (&start, 0);
-	do{
-		if (gtk_text_iter_get_char (&start) == '\t')
-			total_size += tab_width;
-		else
-			++total_size;
+	GsiIndenter *indenter;
+	GtkTextView *view;
+	GtkSourceLanguage *language;
+	const gchar *lang_id = NULL;
+	const gchar *relocators = NULL;
+	gchar c;
+	gboolean found = FALSE;
+
+	/*TODO prevent paste by the moment*/
+	if (len >2)
+		return;
+
+	view = get_view (buffer);
 		
-		gtk_text_iter_forward_char (&start);
-	}while (gtk_text_iter_compare (&start, iter) != 0);
-	
-	/*+1 Is the pair,by example )*/
-	total_size++;
+	language = gtk_source_buffer_get_language (GTK_SOURCE_BUFFER (buffer));
 	
-	if (gtk_source_view_get_insert_spaces_instead_of_tabs (view))
+	if (language)
 	{
-		indent = g_strnfill (total_size, ' ');
+		lang_id = gtk_source_language_get_id (language);
 	}
-	else
-	{
-		guint t, s;
-		
-		t = total_size / tab_width;
-		s = total_size  % tab_width;
+	indenter = gsi_indenters_manager_get_indenter (self->priv->manager, lang_id);
+	g_assert (indenter != NULL);
 		
-		indent = get_indent_string (t, s);
-	}
-	
-	return indent;
-}
-
-static gboolean
-move_to_pair_char (GtkTextIter *iter, 
-		   const gchar *start_pair,
-		   const gchar *end_pair,
-		   gboolean to_first_open_closed_pair)
-{
-	gint count = to_first_open_closed_pair ? -1 : 0;
-	gboolean found = FALSE;
-	gchar *c;
-	GtkTextIter prev_iter = *iter;
-	
-	g_debug ("searching pair [%s]", start_pair);
-	
-	while (gtk_text_iter_backward_char (iter))
+	c = text[len-1];
+	if (c == '\n')
 	{
-		c = gtk_text_iter_get_slice (iter, &prev_iter);
-		g_debug ("[%s]", c);
-		prev_iter = *iter;
-		
-		if (g_utf8_collate (end_pair, c) == 0)
-		{
-			count++;
-		}
-		else if (g_utf8_collate (start_pair, c) == 0)
-		{
-			if (count == 0)
-			{
-				g_debug ("Found pair: %i-%i",
-					 gtk_text_iter_get_line (iter),
-					 gtk_text_iter_get_line_offset (iter));
-				found = TRUE;
-				break;
-			}
-			count--;
-		}
+		g_debug ("insert");
+		gsi_indenter_indent_new_line (indenter, view, location);
+		g_debug ("end insert");
+		return;
 	}
-	return found;
-}
-
-static gchar*
-get_line_text (GtkTextBuffer *buffer, GtkTextIter *iter)
-{
-	GtkTextIter start;
 	
-	start = *iter;
-	gtk_text_iter_set_line_offset (&start, 0);
-
-	return gtk_text_buffer_get_text (buffer,
-					 &start,
-					 iter,
-					 FALSE);
-}
-
-static gchar*
-get_indent (Indenter *indenter, const gchar *text)
-{
-	GRegex *regex;
-	GMatchInfo *match_info;
-	gchar *ind = NULL;
-	gchar *end = NULL;
-
-	/*TODO Store the regex in cache*/
-	regex = g_regex_new ("^\\s*", 0, 0, NULL);
-	g_regex_match (regex, text, 0, &match_info);
-	if (g_match_info_matches (match_info))
-	{
-		ind = g_match_info_fetch (match_info, 0);
-	}
+	if (!gsi_indenter_has_relocators (indenter))
+		return;
 	
-	g_match_info_free (match_info);
-	g_regex_unref (regex);
+	relocators = gsi_indenter_get_relocators (indenter, view);
 	
-	if (indenter && indenter->append)
-	{
-		end = g_strconcat (ind, indenter->append, NULL);
-		g_free (ind);
-	}
-	else
-	{
-		end = ind;
-	}
+	if (!relocators)
+		return;
 	
-	return end;
-}
-
-static gchar*
-indenter_process (Indenter *indenter, GtkSourceView *view, GtkTextIter *iter, const gchar *text)
-{
-	gchar *indent = NULL;
-	gboolean found = FALSE;
-	g_debug ("regexp [%s], type [%i]", indenter->match, indenter->type);
-	/*TODO Store the regexp in cache*/
-	if (g_regex_match_simple (indenter->match,
-				  text,
-				  0,
-				  0))
+	while (*relocators != '\0')
 	{
-		if (indenter->type == INDENT_TO_PAIR)
-		{
-			if (move_to_pair_char (iter, indenter->start_pair, indenter->end_pair, indenter->with_close_pair))
-			{
-				indent = get_indent_from_pair (view, iter);
-				found = TRUE;
-			}
-		}
-		else if (indenter->type == INDENT_PAIR_LINE)
-		{
-			if (move_to_pair_char (iter, indenter->start_pair, indenter->end_pair, indenter->with_close_pair))
-			{
-				gchar *pair_line_text = get_line_text (
-					gtk_text_view_get_buffer (GTK_TEXT_VIEW (view)),
-								  iter);
-				
-				indent = get_indent (indenter, pair_line_text);
-				g_debug ("pair_line %s\nindent %s", pair_line_text, indent);
-				g_free (pair_line_text);
-				found = TRUE;
-			}
-		}
-
-		if (!found)
-			indent = get_indent (indenter, text);
+	  if (c == *relocators)
+	    {
+	      found = TRUE;
+	      break;
+	    }
+	  relocators++;
 	}
 	
-	return indent;
-}
+	if (!found)
+	  return;
 
-static void
-window_data_free (WindowData *data)
-{
-        g_return_if_fail (data != NULL);
-
-        g_slice_free (WindowData, data);
+	if (gsi_indenter_relocate (indenter, view, location, c))
+	  g_debug ("relocated");
 }
 
-static void
-insert_text_cb (GtkTextBuffer *buffer,
-		GtkTextIter   *location,
-		gchar         *text,
-		gint           len,
-		GeditsmartindenterPlugin *self)
+static gboolean
+key_press_event_cb (GtkTextView *view,
+		    GdkEventKey *event,
+		    GeditsmartindenterPlugin *self)
 {
-	gchar c = text[len-1];
-	if (c == '\n')
+	if ((event->state & GDK_CONTROL_MASK) && event->keyval == GDK_j)
 	{
-		GtkTextView *view = get_view (buffer);
+		g_debug ("cj");
+		GtkTextBuffer *buffer = gtk_text_view_get_buffer (view);
+		GtkTextIter start, end;
+
+		g_signal_handlers_block_by_func (buffer, insert_text_cb, self);
+				
+		/*TODO Create a function to get the indenter of a view*/
 		GsiIndenter *indenter;
 		GtkSourceLanguage *language = gtk_source_buffer_get_language (GTK_SOURCE_BUFFER (buffer));
 		const gchar *lang_id = NULL;
@@ -360,94 +181,23 @@ insert_text_cb (GtkTextBuffer *buffer,
 		}
 		indenter = gsi_indenters_manager_get_indenter (self->priv->manager, lang_id);
 		g_assert (indenter != NULL);
-	
-		gsi_indenter_indent_new_line (indenter, view, location);
-	}
-	
-}
-
-static gboolean
-key_press_cb (GtkTextView		*view,
-		GdkEventKey 		*event,
-		GeditsmartindenterPlugin *self)
-{
-	GsiIndenter *indenter;
-	GtkTextBuffer *buffer = gtk_text_view_get_buffer (view);
-	GtkSourceLanguage *language = gtk_source_buffer_get_language (GTK_SOURCE_BUFFER (buffer));
-	GtkTextIter location;
-	const gchar *lang_id = NULL;
-	if (language)
-	{
-		lang_id = gtk_source_language_get_id (language);
-	}
-	indenter = gsi_indenters_manager_get_indenter (self->priv->manager, lang_id);
-	g_assert (indenter != NULL);
-	
-	gtk_text_buffer_get_iter_at_mark (buffer, 
-					  &location,
-					  gtk_text_buffer_get_insert (GTK_TEXT_BUFFER (buffer)));
-	
-	gsi_indenter_indent_new_line (indenter, view, &location);
-	
-	return FALSE;
-	/*
-	GList *l;
-	Indenter *indenter;
-	GtkTextIter location;
-	GtkTextIter temp_iter;
-	GtkTextBuffer *buffer;
-	gchar *line_text;
-	gchar *indent = NULL;
-
-	if (event->keyval != GDK_Return)
-		return FALSE;
-	
-	buffer = gtk_text_view_get_buffer (view);
-	gtk_text_buffer_get_iter_at_mark (buffer, 
-	                            &location,
-	                            gtk_text_buffer_get_insert (buffer));
 		
-	if (gtk_text_iter_get_line_offset (&location) != 0)
-	{
-		line_text = get_line_text (buffer, &location);
-		
-		for (l = self->priv->indenters; l != NULL ; l = g_list_next (l))
+		if (gtk_text_buffer_get_selection_bounds (buffer, &start, &end))
 		{
-			temp_iter = location;
-			indenter = (Indenter*)l->data;
-			indent = indenter_process (indenter,
-						   GTK_SOURCE_VIEW (view),
-						   &temp_iter,
-						   line_text);
-
-			if (indent) break;
+			gsi_indenter_indent_region (indenter, view, &start, &end);
 		}
-		
-		if (!indent)
-		{
-			indent = get_indent (NULL, line_text);
-		}
-		g_debug ("start insert");
-		gtk_text_buffer_begin_user_action (buffer);
-		gtk_text_buffer_insert_at_cursor (buffer,
-						  "\n",
-						  -1);
-		if (indent)
+		else
 		{
-			gtk_text_buffer_insert_at_cursor (buffer,
-							  indent,
-							  g_utf8_strlen (indent, -1));
-			g_free (indent);
+			gtk_text_buffer_get_iter_at_mark (buffer,
+							  &start,
+							  gtk_text_buffer_get_insert (buffer));
+			gsi_indenter_indent_line (indenter, view, &start);
 		}
-		gtk_text_buffer_end_user_action (buffer);
-		g_debug ("end insert");
 		
-		g_free (line_text);
-		
-		return TRUE;
+		g_signal_handlers_unblock_by_func (buffer, insert_text_cb, self);
+		g_debug ("end cj");
 	}
 	return FALSE;
-	*/
 }
 
 static void
@@ -455,10 +205,16 @@ document_enable (GeditsmartindenterPlugin *self, GeditView *view)
 {
 	GtkTextBuffer *buffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));
 	g_object_set_data (G_OBJECT (buffer), VIEW_KEY, view);
+	
 	g_signal_connect_after (buffer,
 				"insert-text",
 				G_CALLBACK (insert_text_cb),
 				self);
+	g_signal_connect_after (view,
+				"key-press-event",
+				G_CALLBACK (key_press_event_cb),
+				self);
+	g_object_set_data (G_OBJECT (view), ENABLED_KEY, buffer);
 }
 
 static void
@@ -467,8 +223,9 @@ tab_changed_cb (GeditWindow *geditwindow,
                 GeditsmartindenterPlugin   *self)
 {
         GeditView *view = gedit_tab_get_view (tab);
-
-        document_enable (self, view);
+	
+	if (!is_enabled (view))
+	  document_enable (self, view);
 }
 
 
@@ -492,11 +249,11 @@ impl_activate (GeditPlugin *plugin,
                                 wdata,
                                 (GDestroyNotify) window_data_free);
 
-	g_signal_connect (window, "active-tab-changed",
-                          G_CALLBACK (tab_changed_cb),
-                          self);
+	g_signal_connect_after (window, "active-tab-changed",
+				G_CALLBACK (tab_changed_cb),
+				self);
 
-	/*
+	/* TODO
         g_signal_connect (window, "active-tab-state-changed",
                           G_CALLBACK (tab_state_changed_cb),
                           self);
